997. Find the Town Judge

In a town, there are n people labeled from 1 to n. There is a rumor that one of these people is secretly the town judge. If the town judge exists, then:
The town judge trusts nobody.
Everybody (except for the town judge) trusts the town judge.
There is exactly one person that satisfies properties 1 and 2.
You are given an array trust where trust[i] = [ai, bi] representing that the person labeled ai trusts the person labeled bi. If a trust relationship does not exist in trust array, then such a trust relationship does not exist.
Return the label of the town judge if the town judge exists and can be identified, or return -1 otherwise.

Approach used : Hashing 
class Solution {
    public int findJudge(int n, int[][] trust) {
        if (n == 1 && trust.length == 0) return 1;

        Map<Integer, Integer> trustScore = new HashMap<>();

        for (int[] relation : trust) {
            int a = relation[0];
            int b = relation[1];

            trustScore.put(a, trustScore.getOrDefault(a, 0) - 1);

            trustScore.put(b, trustScore.getOrDefault(b, 0) + 1);
        }

        for (int i = 1; i <= n; i++) {
            if (trustScore.getOrDefault(i, 0) == n - 1) {
                return i; 
            }
        }

        return -1; 
    }
}
